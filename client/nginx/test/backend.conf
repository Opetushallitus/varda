server {
    set $auth_user 'tester';
    set $auth_pass 'tiptoes';
    set $auth_token 'very-big-bear';
    server_name _;
    listen 8082 default_server;
    location = /api/user/apikey/ {
        access_by_lua_block {
            ngx.header["Content-Type"] = "application/json"
            if (ngx.var.request_method == 'OPTIONS') then
                ngx.exit(200)
            end
            if not (ngx.var.request_method == 'GET') then
                ngx.status = 405
                ngx.say('{"detail":"Method not allowed"}')
                return
            end
            if not ngx.var.http_authorization then
                ngx.status = 401
                ngx.say('{"detail":"Authorization required"}')
                return
            end
            local basicb64 = string.sub(ngx.var.http_authorization, 7)
            local auth = ngx.decode_base64(basicb64)
            local parts = string.gmatch(auth, "[^:]+")
            local user = ""
            local pass = ""
            local n = 0
            for i in parts do
                if n == 0 then
                    user = i
                end
                if n == 1 then
                    pass = i
                end
                n = n+1
            end
            ngx.log(ngx.ERR, "AUTH: -" .. auth .. "-; USER: -" .. user .. "-; PASS: -" .. pass .. "-")
            ngx.log(ngx.ERR, "VS: USER: " .. ngx.var.auth_user .. "; PASS: " .. ngx.var.auth_pass)
            if (not (user == ngx.var.auth_user and pass == ngx.var.auth_pass)) then
                ngx.status = 401
                ngx.say('{"detail":"Username or password does not match"}')
                return
            end
            ngx.say('{"detail":"Login ok","Token":"' .. ngx.var.auth_token .. '"}')
        }
        content_by_lua 'print("")';
    }

    location ^~ /api {
        access_by_lua_block {
            ngx.header["Content-Type"] = "application/json"
            if not ngx.var.http_authorization then
                ngx.status = 401
                ngx.say('{"detail":"Authorization required"}')
                return
            end
            local bearer = string.sub(ngx.var.http_authorization, 1, 6)
            -- ngx.log(ngx.ERR, 'TYPE: ' .. bearer)
            if not (bearer == 'Bearer') then
                ngx.status = 401
                ngx.say('{"detail":"Invalid authorization"}')
                return
            end
            local token = string.sub(ngx.var.http_authorization, 9)
            ngx.log(ngx.ERR, 'TOKEN: ' .. token .. ' vs. ' .. ngx.var.auth_token .. ' RAW ' .. ngx.var.http_authorization)
            if not (token == ngx.var.auth_token) then
                ngx.status = 401
                ngx.say('{"detail":"Auth failed"}')
                return
            end
            ngx.say('{"detail":"Request OK", "url":"' .. ngx.var.scheme .. '://' .. ngx.var.host .. ':' .. ngx.var.server_port .. ngx.var.request_uri .. '"}')
        }
        content_by_lua 'print("")';
    }

    location /api-auth/logout/ {
        access_by_lua_block {
            ngx.header["Content-Type"] = "application/json"
            ngx.say('{"detail":"Request OK", "url":"' .. ngx.var.scheme .. '://' .. ngx.var.host .. ':' .. ngx.var.server_port .. ngx.var.request_uri .. '"}')
        }
        content_by_lua 'print("")';
    }

    location / {
        access_by_lua_block {
            ngx.header["Content-Type"] = "application/json"
            ngx.status = 401
        }
        content_by_lua 'print("{\"detail\":\"Static content\"}")';
    }
}
