# Require our utilities
init_by_lua '
    varda_utils = require "varda"
';

server {
  ####################################################################################################################
  # Initialize
  set_by_lua $oph_api_ip 'return os.getenv("OPH_API_IP")';
  set_by_lua $front_host 'return os.getenv("VARDA_FRONTEND_HOSTNAME")';
  set_by_lua $front_proto 'return (not (os.getenv("VARDA_FRONTEND_PROTOCOL") == nil) and os.getenv("VARDA_FRONTEND_PROTOCOL") or "https")';
  set_by_lua $backend 'return os.getenv("VARDA_BACKEND_HOSTNAME")';
  set_by_lua $proxy_proto 'return (not (os.getenv("VARDA_BACKEND_PROTOCOL") == nil) and os.getenv("VARDA_BACKEND_PROTOCOL") or "https")';
  set_by_lua $dynamicsalt 'return (not (os.getenv("VARDA_SALT") == nil) and os.getenv("VARDA_SALT") or "pt33-5exSbk7-Az85e77CZ-yUtrujsZ")';
  set_by_lua $sessionsecure 'return (not (os.getenv("VARDA_SESSION_SECURE") == nil) and os.getenv("VARDA_SESSION_SECURE") or "Secure;")';
  set $staticsalt "3Sn4nMsUCYCqtC6K32ZFKDuzQcUE";
  set $sessionlifetime 3600;
  set $sessionname "VARDA_FSESSION";

  # FUNET - https://wiki.eduuni.fi/display/funet/Nimipalvelut
  resolver 193.166.4.25;
  listen 8080;

  ####################################################################################################################
  # Show statistics from nginx
  location = /varda/api/server/statistics/internal/ {
    allow 127.0.0.1;
    deny all;
    stub_status;
  }

  location = /varda/api/server/statistics/ {
    access_by_lua_block {
      local authok = varda_utils.require_internal_auth(ngx.req.get_headers())
      if not authok then
        ngx.status = 401
        ngx.say('{"errors":[{"error_code": "NG007", "description": "Unauthorized.", "translations": []}]}')
        ngx.exit(401)
      end
    }
    header_filter_by_lua_block {
      ngx.header["Content-Type"] = "application/json"
      varda_utils.set_content_disposition_header()
    }
    content_by_lua_block {
      local res = ngx.location.capture("/varda/api/server/statistics/internal/")
      local stats = varda_utils.get_statistics(res.body)
      local s = '{'
      s = s .. '"active":' .. stats.active
      s = s .. ',"reading":' .. stats.reading
      s = s .. ',"writing":' .. stats.writing
      s = s .. ',"waiting":' .. stats.waiting
      s = s .. ',"accepted":' .. stats.accepted
      s = s .. ',"handled":' .. stats.handled
      s = s .. ',"requests":' .. stats.requests
      s = s .. '}'
      ngx.say(s)
    }
  }

  ####################################################################################################################
  # Test proxying to the backend
  location = /varda/api/server/proxy-health/ {
    access_by_lua_block {
      local authok = varda_utils.require_internal_auth(ngx.req.get_headers())
      if not authok then
        ngx.status = 401
        ngx.say('{"errors":[{"error_code": "NG007", "description": "Unauthorized.", "translations": []}]}')
        ngx.exit(401)
      end
      local res = ngx.location.capture("/varda/api/server/proxy-health/internal/")
      local s = '{"response":{"code":' .. res.status
      local result = false
      if res.status == 200 then
        s = s .. ',"test":'
        if string.find(res.body, "number_of_vakajarjestajat") then
          s = s .. 'true,"content":' .. res.body
          result = true
        else
          s = s .. 'false'
        end
      end
      s = s .. '},"result":'
      if result == true then
        s = s .. 'true'
      else
        s = s .. 'false'
      end
      s = s .. '}'
      ngx.status = 200;
      ngx.say(s)
      ngx.exit(200)
    }
    header_filter_by_lua_block {
      ngx.header["Content-Type"] = "application/json"
      varda_utils.set_content_disposition_header()
    }
  }

  location = /varda/api/server/proxy-health/internal/ {
    allow 127.0.0.1;
    deny all;
    proxy_set_header Accept "application/json";
    proxy_set_header Authorization "";
    proxy_pass $proxy_proto://$backend/api/pulssi/vakajarjestajat/;
  }

  ####################################################################################################################
  # Location block for OPH API call
  location = /varda/api/onr/external-permissions/ {
    # Validate IP access
    access_by_lua_block {
      if (not (ngx.var.remote_addr == ngx.var.oph_api_ip)) then
        ngx.header["Content-Type"] = "application/json"
        ngx.log(ngx.ERR, "Unauthorized IP address")
        ngx.status = 403
        ngx.say('{"errors":[{"error_code": "NG008", "description": "Forbidden.", "translations": []}]}')
        ngx.exit(ngx.OK)
      end
    }

    rewrite ^/varda/(.*)$ /$1 break;
    proxy_set_header X-Proxied-From 'varda-frontend';
    proxy_set_header Cookie '';
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass $proxy_proto://$backend;
    break;
  }

  ####################################################################################################################
  # Location block for login, that is not validated for session
  location ~ ^/varda(/api/user/apikey/)$ {
    access_by_lua_block {
      -- change CSRF cookie to header on the fly
      if ngx.var['cookie_csrftoken'] then
        ngx.header['X-CSRFToken'] = ngx.var['cookie_csrftoken']
      end
    }
    rewrite ^/varda/(.*)$ /$1 break;
    proxy_set_header Cookie '';
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cookie_domain ~.+$ $front_host;
    proxy_cookie_path / /varda;
    proxy_pass $proxy_proto://$backend;
    header_filter_by_lua_block {
      local code = ngx.status
      if not (ngx.var.request_method == 'GET' or ngx.var.request_method == 'POST') then
        -- do not start session for OPTIONS etc.
        return
      end
      if not (code == 200 or code == 201) then
        -- clear the cookie by setting it expired in the past
        ngx.header['Set-Cookie'] = varda_utils.create_expired_cookie_str()
        return
      end

      -- set the cookie
      ngx.header['Set-Cookie'] = varda_utils.create_cookie_str()
      varda_utils.set_content_disposition_header()
    }
  }

####################################################################################################################
  # Location block for public/anonymous access (not validated for session)
  location ~ ^(/varda/api/julkinen/.*)|(/varda/julkinen/api/julkinen/.*)|(/varda/julkinen/static/drf-yasg/.*)|(/varda/julkinen/static/scripts/.*)$ {
    access_by_lua_block {
      if not (ngx.var.request_method == 'GET') then
        -- do not allow anything else than GET
        ngx.log(ngx.ERR, 'Not supported HTTP method')
        -- https://github.com/openresty/lua-nginx-module/issues/60
        ngx.header.content_type = 'application/json'
        ngx.status = 405
        ngx.say('{"errors":[{"error_code": "NG006", "description": "Method not allowed.", "translations": []}]}')
        return ngx.exit(200)
      end
      -- change CSRF cookie to header on the fly
      if ngx.var['cookie_csrftoken'] then
        ngx.header['X-CSRFToken'] = ngx.var['cookie_csrftoken']
      end
    }

    # Virkailija-app proxy
    rewrite ^/varda/(api/julkinen/.*)$ /$1 break;
    # Public-app proxy
    rewrite ^/varda/julkinen/(api/julkinen/.*)$ /$1 break;

    proxy_set_header Cookie '';
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cookie_domain ~.+$ $front_host;
    proxy_cookie_path / /varda;
    proxy_pass $proxy_proto://$backend;
    header_filter_by_lua_block {
      local code = ngx.status
      if not (code == 200 or code == 429 or code == 405) then
        -- If status code is not 200 or 429, means internal server error
        ngx.status = 500
        code = 500
      end
      if (code == 429 or code == 500) then
        -- Custom response body set in body_filter_by_lua_block
        -- https://github.com/openresty/lua-nginx-module#body_filter_by_lua
        ngx.header.content_type = 'application/json'
        ngx.header.content_length = nil
      end
      varda_utils.set_content_disposition_header()
    }
    body_filter_by_lua_block {
      local code = ngx.status
      if (code == 429) then
        -- If status code is 429, means request is throttled
        ngx.log(ngx.ERR, 'Too many requests')
        ngx.arg[1] = '{"errors": [{"error_code": "NG004", "description": "Request is throttled.", "translations": []}]}'
        ngx.arg[2] = true
      end
      if (code == 500) then
        ngx.log(ngx.ERR, 'Public api returned non-200 status code')
        ngx.arg[1] = '{"errors": [{"error_code": "NG005", "description": "Internal server error.", "translations": []}]}'
        ngx.arg[2] = true
      end
    }
  }

  ####################################################################################################################
  # Catch logging out
  location ~ ^/varda(/api-auth/logout/)$ {
    access_by_lua_block {
      -- change CSRF cookie to header on the fly
      if ngx.var['cookie_csrftoken'] then
        ngx.header['X-CSRFToken'] = ngx.var['cookie_csrftoken']
      end
    }
    rewrite ^/varda/(.*)$ /$1 break;
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cookie_domain ~.+$ $front_host;
    proxy_cookie_path / /varda;
    proxy_pass $proxy_proto://$backend;
    header_filter_by_lua_block {
      local ck = require "resty.cookie"
      local cookie, err = ck:new()
      local fields, err = cookie:get_all()
      local extra = nil
      local hastoken = false
      if fields ~= nil then
        for k, v in pairs(fields) do
          if not (k == ngx.var.sessionname or k == "csrftoken" or k == "token" or k == "sessionid") then
            extra = k
          end
        end
      end
      -- clear the cookies by setting them expired in the past
      ngx.header['Set-Cookie'] = {
        varda_utils.delete_cookie(extra, {}),
        varda_utils.delete_cookie('csrftoken', {wildcard=1,secure=1,samesite=1}),
        varda_utils.delete_cookie('token', {wildcard=1,secure=1,samesite=1}),
        varda_utils.delete_cookie('sessionid', {httponly=1,secure=1,samesite=1}),
        varda_utils.create_expired_cookie_str()
      }
      ngx.header['X-CSRFToken'] = nil
      varda_utils.set_content_disposition_header()
    }
  }

  ####################################################################################################################
  # Make it possible to ask about configuration (possibly limit access?)
  #location /varda/api/sys/params/ {
  #  content_by_lua_block {
  #    ngx.say('{"backend": {"url":"' .. ngx.var.proxy_proto .. '://' .. ngx.var.backend .. '"},'
  #          .. '"frontend":{"url":"' .. ngx.var.front_proto .. '://' .. ngx.var.front_host .. '"}'
  #          .. '}');
  #  }
  #  header_filter_by_lua_block {
  #    ngx.header["Content-Type"] = "application/json"
  #    return
  #  }
  #}

  ####################################################################################################################
  # Login view from the backend
  location ~ ^/varda(/(api-auth|accounts)/.*)$ {
    access_by_lua_block {
      -- Set target where to return after login
      local target_path = ''
      if string.match(ngx.var.request_uri, '/huoltaja%-login') then
        target_path = '/varda/accounts/huoltaja-login'
      else
        target_path = '/varda/accounts/login'
      end
      local target = ngx.var.front_proto .. '://' .. ngx.var.front_host .. target_path
      ngx.req.set_header('CAS-NEXT', target)
      ngx.req.set_header('CAS-NEXT-HASH', varda_utils.create_security_hash(target))
      -- change CSRF cookie to header on the fly
      if ngx.var['cookie_csrftoken'] then
        ngx.header['X-CSRFToken'] = ngx.var['cookie_csrftoken']
      end
    }

    # Styles for the login page
    sub_filter '/static/rest_framework/' '/varda/static/rest_framework/';
    sub_filter 'action="/api-auth/' 'action="/varda/api-auth/';
    sub_filter 'href="/accounts/login?next="' 'href="/varda/accounts/login?next=$front_proto%3A%2F%2F$front_host%2Fvarda%2F"';
    sub_filter_last_modified on;
    sub_filter_once off;

    rewrite ^/varda/(.*)$ /$1 break;
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cookie_domain ~.+$ $front_host;
    proxy_cookie_path / /varda;
    proxy_pass $proxy_proto://$backend;
  }

  ####################################################################################################################
  # Static files for the login page
  location ~ ^/varda(/static/rest_framework/.*[.](css|js))$ {
    rewrite ^/varda/(.*)$ /$1 break;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass $proxy_proto://$backend;
  }

  ####################################################################################################################
  # Rest of the api block requires valid session
  location ~ ^/varda(/api/.*)$ {
    # Validate session
    access_by_lua_block {
      -- if there is no cookie at all
      if not ngx.var['cookie_' .. ngx.var.sessionname] then
        ngx.header["Content-Type"] = "application/json"
        ngx.log(ngx.ERR, "No cookies :/")
        ngx.status = 401
        ngx.say('{"errors": [{"error_code": "NG001", "description": "Session is required.", "translations": []}]}')
        return
      end

      local cookiedata = varda_utils.extract_cookie_str(ngx.var['cookie_' .. ngx.var.sessionname])

      -- if the cookie is tampered with
      if not varda_utils.validate_cookie_data(cookiedata) then
        ngx.header['Set-Cookie'] = varda_utils.create_expired_cookie_str()
        ngx.header["Content-Type"] = "application/json"
        ngx.log(ngx.ERR, "Invalid or empty cookie" .. " remote_addr: " .. ngx.var.remote_addr .. " http_x_forwarded_for: " .. ngx.var.http_x_forwarded_for)
        ngx.status = 401
        ngx.say('{"errors": [{"error_code": "NG002", "description": "Session is invalid.", "translations": []}]}')
        return
      end

      -- if the cookie is older than defined lifetime
      local curtime = ngx.time()
      if ((curtime - ngx.var.sessionlifetime) > cookiedata['timestamp']) then
        ngx.header['Set-Cookie'] = varda_utils.create_expired_cookie_str()
        ngx.header["Content-Type"] = "application/json"
        ngx.log(ngx.ERR, "Session timeout")
        ngx.status = 401
        ngx.say('{"errors": [{"error_code": "NG003", "description": "Session has expired.", "translations": []}]}')
        return
      end

      -- change CSRF cookie to header on the fly
      if ngx.var['cookie_csrftoken'] then
        ngx.header['X-CSRFToken'] = ngx.var['cookie_csrftoken']
      end
    }

    ##################################################################################################################
    rewrite ^/varda/(.*)$ /$1 break;
    proxy_set_header Cookie '';
    # We need to fake Referer to avoid CSRF protections
    proxy_set_header Referer $proxy_proto://$backend/;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cookie_domain ~.+$ $front_host;
    proxy_cookie_path / /varda;
    # If everything ok, proxy the request
    proxy_pass $proxy_proto://$backend;
    # We need to get rid of the full urls on the result
    sub_filter "$proxy_proto://$backend" '';
    sub_filter_last_modified on;
    sub_filter_once off;
    sub_filter_types '*';

    ##################################################################################################################
    # Update session so the lifetime starts over
    header_filter_by_lua_block {
      local code = ngx.status
      -- If the status is not 200, do not renew the session
      if not (code == 200) then
        return
      end

      -- Otherwise renew the session cookie (restarting the one hour limit)
      ngx.header['Set-Cookie'] = varda_utils.create_cookie_str()
      varda_utils.set_content_disposition_header()
    }
  }

  ####################################################################################################################
  # Static requests to frontend
  location ~ ^/varda/.+\.(css|js|ico|txt)$ {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ =404;
  }

  ####################################################################################################################
  # Rest of the requests to the frontend
  location /varda/julkinen/ {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /varda/julkinen/index.html =404;
    # Client cache control
    add_header Cache-Control "no-store, no-cache, must-revalidate";
  }
  location /varda/ {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /varda/index.html =404;
    # Client cache control
    add_header Cache-Control "no-store, no-cache, must-revalidate";
  }

  ####################################################################################################################
  # Add missing slash to the end
  location =/varda {
    return 302 $front_proto://$front_host/varda/;
  }
  location =/varda/julkinen {
    return 302 $front_proto://$front_host/varda/julkinen/;
  }
  # Forward root to the subfolder
  location =/ {
    return 302 $front_proto://$front_host/varda/;
  }
}
