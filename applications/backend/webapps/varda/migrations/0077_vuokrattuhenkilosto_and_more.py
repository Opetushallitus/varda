# Generated by Django 4.1.7 on 2023-03-08 10:29

import django
from django.conf import settings
from django.db import migrations, models
from django.db.models import Q, Func, F, Value
from django.db.models.functions import Replace


def forwards_func(apps, schema_editor):
    # RenameModel creates new Permission objects for VuokrattuHenkilosto-model
    # We want to rename old TilapainenHenkilosto Permission objects to match new model name so that we don't need to
    # rebuild all group permissions
    Permission = apps.get_model('auth', 'Permission')
    db_alias = schema_editor.connection.alias
    Permission.objects.using(db_alias).filter(Q(codename__endswith='_vuokrattuhenkilosto') |
                                              Q(codename__endswith='_historicalvuokrattuhenkilosto')).delete()
    rename_permissions(Permission, db_alias, 'tilapainenhenkilosto', 'vuokrattuhenkilosto')

    # Update Z9_RelatedObjectChanged trigger_model_name so that historical reporting functionality continues to work
    Z9_RelatedObjectChanged = apps.get_model('varda', 'Z9_RelatedObjectChanged')
    (Z9_RelatedObjectChanged.objects.using(db_alias)
     .filter(trigger_model_name='tilapainenhenkilosto')
     .update(trigger_model_name='vuokrattuhenkilosto'))

    # Update Organisaatio integraatio_organisaatio
    Organisaatio = apps.get_model('varda', 'Organisaatio')
    (Organisaatio.objects.using(db_alias)
     .filter(integraatio_organisaatio__contains=['tilapainenhenkilostotiedot'])
     .update(integraatio_organisaatio=Func(F('integraatio_organisaatio'), Value('tilapainenhenkilostotiedot'),
                                           Value('vuokrattuhenkilostotiedot'), function='array_replace')))

    # Rename permission groups
    Group = apps.get_model('auth', 'Group')
    (Group.objects.using(db_alias)
     .filter(name__startswith='HENKILOSTO_TILAPAISET')
     .update(name=Replace('name', Value('HENKILOSTO_TILAPAISET'), Value('HENKILOSTO_VUOKRATTU'))))
    # Rename template groups
    (Group.objects.using(db_alias)
     .filter(name__startswith='vakajarjestaja_henkilosto_tilapainen')
     .update(name=Replace('name', Value('vakajarjestaja_henkilosto_tilapainen'),
                          Value('vakajarjestaja_henkilosto_vuokrattu'))))


def reverse_func(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    db_alias = schema_editor.connection.alias
    rename_permissions(Permission, db_alias, 'vuokrattuhenkilosto', 'tilapainenhenkilosto')

    Z9_RelatedObjectChanged = apps.get_model('varda', 'Z9_RelatedObjectChanged')
    (Z9_RelatedObjectChanged.objects.using(db_alias)
     .filter(trigger_model_name='vuokrattuhenkilosto')
     .update(trigger_model_name='tilapainenhenkilosto'))

    Organisaatio = apps.get_model('varda', 'Organisaatio')
    (Organisaatio.objects.using(db_alias)
     .filter(integraatio_organisaatio__contains=['vuokrattuhenkilostotiedot'])
     .update(integraatio_organisaatio=Func(F('integraatio_organisaatio'), Value('vuokrattuhenkilostotiedot'),
                                           Value('tilapainenhenkilostotiedot'), function='array_replace')))

    Group = apps.get_model('auth', 'Group')
    (Group.objects.using(db_alias)
     .filter(name__startswith='HENKILOSTO_VUOKRATTU')
     .update(name=Replace('name', Value('HENKILOSTO_VUOKRATTU'), Value('HENKILOSTO_TILAPAISET'))))
    (Group.objects.using(db_alias)
     .filter(name__startswith='vakajarjestaja_henkilosto_vuokrattu')
     .update(name=Replace('name', Value('vakajarjestaja_henkilosto_vuokrattu'),
                          Value('vakajarjestaja_henkilosto_tilapainen'))))


def rename_permissions(Permission, db_alias, old_model_name, new_model_name):
    for permission in Permission.objects.using(db_alias).filter(Q(codename__endswith=f'_{old_model_name}') |
                                                                Q(codename__endswith=f'_historical{old_model_name}')):
        historical = 'historical ' if 'historical' in permission.name else ''
        permission_type = permission.codename.split('_')[0]
        permission.codename = f'{permission_type}_{historical.strip()}{new_model_name}'
        permission_name_list = permission.name.split(' ')
        permission.name = f'{permission_name_list[0]} {permission_name_list[1]} {historical}{new_model_name}'
        permission.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('varda', '0076_historicaltyontekija_sahkopostiosoite_and_more'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='TilapainenHenkilosto',
            new_name='VuokrattuHenkilosto',
        ),
        migrations.AlterModelOptions(
            name='vuokrattuhenkilosto',
            options={'verbose_name_plural': 'vuokrattu henkilosto'},
        ),
        migrations.AlterField(
            model_name='vuokrattuhenkilosto',
            name='vakajarjestaja',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vuokrattu_henkilosto', to='varda.organisaatio'),
        ),
        migrations.RenameModel(
            old_name='HistoricalTilapainenHenkilosto',
            new_name='HistoricalVuokrattuHenkilosto',
        ),
        migrations.AlterModelOptions(
            name='historicalvuokrattuhenkilosto',
            options={'get_latest_by': ('history_date', 'history_id'), 'ordering': ('-history_date', '-history_id'), 'verbose_name': 'historical vuokrattu henkilosto', 'verbose_name_plural': 'historical vuokrattu henkilosto'},
        ),
        migrations.AlterField(
            model_name='z4_caskayttooikeudet',
            name='kayttooikeus',
            field=models.CharField(blank=True, choices=[('VARDA-PAAKAYTTAJA', 'Varda-Pääkäyttäjä'), ('VARDA-TALLENTAJA', 'Varda-Tallentaja'), ('VARDA-KATSELIJA', 'Varda-Katselija'), ('VARDA-PALVELUKAYTTAJA', 'Varda-Palvelukäyttäjä'), ('HUOLTAJATIETO_TALLENNUS', 'Varda-Huoltajatietojen tallentaja'), ('HUOLTAJATIETO_KATSELU', 'Varda-Huoltajatietojen katselija'), ('HENKILOSTO_TAYDENNYSKOULUTUS_KATSELIJA', 'Varda-Täydennyskoulutustietojen katselija'), ('HENKILOSTO_TAYDENNYSKOULUTUS_TALLENTAJA', 'Varda-Täydennyskoulutustietojen tallentaja'), ('HENKILOSTO_VUOKRATTU_KATSELIJA', 'Varda-Vuokratun henkilöstön katselija'), ('HENKILOSTO_VUOKRATTU_TALLENTAJA', 'Varda-Vuokratun henkilöstön tallentaja'), ('HENKILOSTO_TYONTEKIJA_KATSELIJA', 'Varda-Työntekijätietojen katselija'), ('HENKILOSTO_TYONTEKIJA_TALLENTAJA', 'Varda-Työntekijätietojen tallentaja'), ('VARDA_TOIMIJATIEDOT_KATSELIJA', 'Varda-Toimijatietojen katselija'), ('VARDA_TOIMIJATIEDOT_TALLENTAJA', 'Varda-Toimijatietojen tallentaja'), ('VARDA_RAPORTTIEN_KATSELIJA', 'Varda-Raporttien katselija'), ('VARDA_LUOVUTUSPALVELU', 'VARDA_LUOVUTUSPALVELU'), ('VARDA-YLLAPITAJA', 'VARDA-ylläpitäjä')], max_length=50),
        ),
        migrations.RemoveConstraint(
            model_name='vuokrattuhenkilosto',
            name='tilapainen_henkilosto_lahdejarjestelma_tunniste_unique_constraint'
        ),
        migrations.AddConstraint(
            model_name='vuokrattuhenkilosto',
            constraint=models.UniqueConstraint(condition=models.Q(('tunniste__isnull', False), models.Q(('tunniste', ''), _negated=True)), fields=('lahdejarjestelma', 'tunniste'), name='vuokrattu_henkilosto_lahdejarjestelma_tunniste_unique_constraint'),
        ),
        migrations.RunPython(forwards_func, reverse_code=reverse_func)
    ]
