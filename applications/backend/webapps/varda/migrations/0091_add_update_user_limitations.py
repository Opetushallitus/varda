# Generated by Django 5.0.6 on 2024-10-25 07:45

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('varda', '0090_rename_lapsimaara_historicaltukipaatos_paatosmaara_and_more'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION allow_only_one_user_update() RETURNS trigger AS $$
                DECLARE
                    updated_count INT;
                    current_session_id INT := pg_backend_pid();
                BEGIN
                    CREATE TEMPORARY TABLE IF NOT EXISTS temporary_updated_user_ids (id INT, session_id INT);

                    INSERT INTO temporary_updated_user_ids (id, session_id)
                    VALUES (NEW.id, current_session_id);

                    SELECT COUNT(DISTINCT id) INTO updated_count
                    FROM temporary_updated_user_ids
                    WHERE session_id=current_session_id;

                    IF updated_count > 1 THEN
                        RAISE EXCEPTION 'Cannot update multiple users at once.';
                    END IF;

                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS allow_only_one_user_update();"
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION clean_temporary_updated_user_ids() RETURNS trigger AS $$
                DECLARE
                    current_session_id INT := pg_backend_pid();
                BEGIN
                    DELETE FROM temporary_updated_user_ids
                    WHERE session_id=current_session_id;

                    RETURN NULL;
                END;
                $$ LANGUAGE plpgsql;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS clean_temporary_updated_user_ids();"
        ),
        migrations.RunSQL(
            sql="""
                CREATE TRIGGER user_is_superuser_update_before_trigger
                    BEFORE UPDATE OF is_superuser ON auth_user
                FOR EACH ROW
                    EXECUTE FUNCTION allow_only_one_user_update();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS user_is_superuser_update_before_trigger ON auth_user;"
        ),
        migrations.RunSQL(
            sql="""
                CREATE TRIGGER user_is_superuser_update_after_trigger
                    AFTER UPDATE OF is_superuser ON auth_user
                FOR EACH STATEMENT
                    EXECUTE FUNCTION clean_temporary_updated_user_ids();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS user_is_superuser_update_after_trigger ON auth_user;"
        ),
        migrations.RunSQL(
            sql="""
                CREATE TRIGGER user_is_staff_update_before_trigger
                    BEFORE UPDATE OF is_staff ON auth_user
                FOR EACH ROW
                    EXECUTE FUNCTION allow_only_one_user_update();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS user_is_staff_update_before_trigger ON auth_user;"
        ),
        migrations.RunSQL(
            sql="""
                CREATE TRIGGER user_is_staff_update_after_trigger
                    AFTER UPDATE OF is_staff ON auth_user
                FOR EACH STATEMENT
                    EXECUTE FUNCTION clean_temporary_updated_user_ids();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS user_is_staff_update_after_trigger ON auth_user;"
        ),
    ]
